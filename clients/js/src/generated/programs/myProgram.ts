/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCreateInstruction,
  type ParsedIncrementInstruction,
} from '../instructions';
import { Key, getKeyEncoder } from '../types';

export const MY_PROGRAM_PROGRAM_ADDRESS =
  '2RaKmZtg6Ti7c3v47uajG9KtEG88daRfVTmvzzU4q3kA' as Address<'2RaKmZtg6Ti7c3v47uajG9KtEG88daRfVTmvzzU4q3kA'>;

export enum MyProgramAccount {
  Counter,
}

export function identifyMyProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MyProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getKeyEncoder().encode(Key.Counter), 0)) {
    return MyProgramAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a myProgram account.'
  );
}

export enum MyProgramInstruction {
  Create,
  Increment,
}

export function identifyMyProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MyProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return MyProgramInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return MyProgramInstruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a myProgram instruction.'
  );
}

export type ParsedMyProgramInstruction<
  TProgram extends string = '2RaKmZtg6Ti7c3v47uajG9KtEG88daRfVTmvzzU4q3kA',
> =
  | ({
      instructionType: MyProgramInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: MyProgramInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
